import os
import copy # Импортируем модуль copy
from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.shapes import MSO_SHAPE_TYPE
from io import BytesIO

# --- Функция копирования фигуры (метод с copy.deepcopy) ---
def copy_shape(shape, target_slide):
    """Копирует фигуру с исходного слайда на целевой слайд (используя copy.deepcopy)."""
    try:
        # Используем copy.deepcopy вместо __deepcopy__
        new_element = copy.deepcopy(shape.element)

        # Добавляем скопированный элемент в коллекцию фигур целевого слайда
        # Добавляем перед первым расширением (extLst), если оно есть, иначе в конец.
        # Это может помочь с порядком наложения фигур.
        try:
            ext_lst = target_slide.shapes._spTree.xpath('./p:extLst')[0]
            target_slide.shapes._spTree.insert_element_before(new_element, ext_lst)
        except IndexError: # Если extLst нет
             target_slide.shapes._spTree.append(new_element)

    except Exception as e:
        # Выводим ошибку, если копирование не удалось
        print(f"   [Предупреждение] Не удалось скопировать фигуру типа {getattr(shape, 'shape_type', 'UNKNOWN')} с помощью copy.deepcopy: {e}")
        # Для диагностики можно раскомментировать следующую строку:
        # import traceback; traceback.print_exc()

# --- Основная функция объединения ---
def merge_presentations(pptx_files, output_filename="merged_presentation.pptx"):
    """
    Объединяет несколько файлов PowerPoint (.pptx) в один.

    Args:
        pptx_files (list): Список путей к файлам .pptx, которые нужно объединить.
        output_filename (str): Имя файла для результирующей презентации.
    """
    # Создаем новую пустую презентацию
    merged_presentation = Presentation()
    # Опционально: установить размер слайда как у первой презентации
    try:
        if pptx_files:
            first_prs = Presentation(pptx_files[0])
            merged_presentation.slide_width = first_prs.slide_width
            merged_presentation.slide_height = first_prs.slide_height
    except Exception as e:
        print(f"[Предупреждение] Не удалось установить размер слайда из первого файла: {e}")

    total_slides_copied = 0

    # Проходим по каждому файлу из списка
    for i, pptx_file in enumerate(pptx_files):
        if not os.path.exists(pptx_file):
            print(f"Файл не найден, пропускаем: {pptx_file}")
            continue

        print(f"Обработка файла {i+1}/{len(pptx_files)}: {os.path.basename(pptx_file)}")

        try:
            # Открываем текущую презентацию
            source_presentation = Presentation(pptx_file)

            # Проходим по каждому слайду в текущей презентации
            for j, source_slide in enumerate(source_presentation.slides):
                print(f"  Копирование слайда {j+1}/{len(source_presentation.slides)}...")

                # Получаем индекс макета исходного слайда
                try:
                   layout_index = source_slide.slide_layout.slide_master.slide_layouts.index(source_slide.slide_layout)
                   # Пытаемся найти такой же макет в целевой презентации
                   slide_layout = merged_presentation.slide_layouts[layout_index]
                except (ValueError, IndexError):
                   # Если макет не найден по индексу (мастер-слайды отличаются),
                   # используем стандартный макет (например, пустой - индекс 6 часто бывает 'Blank')
                   print(f"   [Предупреждение] Макет '{source_slide.slide_layout.name}' не найден в целевой презентации или индекс некорректен. Используется стандартный пустой макет (индекс 6).")
                   try:
                       slide_layout = merged_presentation.slide_layouts[6] # Попробуем пустой макет
                   except IndexError:
                       slide_layout = merged_presentation.slide_layouts[0] # Если и 6 нет, берем первый

                # Добавляем новый слайд в объединенную презентацию с выбранным макетом
                target_slide = merged_presentation.slides.add_slide(slide_layout)

                # Копируем фон (очень упрощенно, может не работать для сложных фонов)
                if source_slide.has_background:
                   try:
                       # Пытаемся скопировать fill напрямую (может вызвать ошибку)
                       target_slide.background.fill.element = copy.deepcopy(source_slide.background.fill.element)
                       # print("   [Информация] Фон слайда скопирован (попытка deepcopy).")
                   except Exception as bg_e:
                       # print(f"   [Предупреждение] Не удалось скопировать фон через deepcopy: {bg_e}. Попытка установить простой фон.")
                       # В случае неудачи можно просто сделать фон белым или не трогать
                       pass # Оставляем фон макета

                # Копируем все фигуры со старого слайда на новый
                for shape in source_slide.shapes:
                   copy_shape(shape, target_slide)

                # Копируем заметки к слайду (если есть)
                if source_slide.has_notes_slide:
                    try:
                        notes_tf = target_slide.notes_slide.notes_text_frame
                        notes_tf.text = source_slide.notes_slide.notes_text_frame.text
                    except Exception as notes_e:
                        print(f"   [Предупреждение] Не удалось скопировать заметки к слайду: {notes_e}")


                total_slides_copied += 1

        except Exception as e:
            print(f"\n!!! Ошибка при обработке файла {pptx_file}: {e}\n")
            # Для детальной диагностики можно раскомментировать:
            # import traceback; traceback.print_exc()

    # Сохраняем объединенную презентацию
    try:
        merged_presentation.save(output_filename)
        print(f"\nГотово! {total_slides_copied} слайдов скопировано в файл '{output_filename}'.")
        print("!!! Внимание: Проверьте итоговый файл на корректность отображения всех элементов.")
    except Exception as e:
        print(f"!!! Ошибка при сохранении файла {output_filename}: {e}")

# --- Запуск объединения ---
if __name__ == "__main__":
    # 1. Убедитесь, что библиотека установлена:
    #    pip install python-pptx
    #    (или pip3 install python-pptx)

    # 2. Поместите этот скрипт в ту же папку, где лежат ваши файлы PPTX,
    #    ИЛИ укажите полные пути к файлам.
    input_presentations = [
        "дт акты.pptx",
        "Свод МЭБ 28.03..pptx",
        "ДП и СП 28.03.2025 под акт.pptx",
    ]

    # 3. Укажите имя для итогового файла
    output_file = "Объединенная_презентация_ИТОГ.pptx"

    # 4. Запустите функцию объединения
    merge_presentations(input_presentations, output_file)
